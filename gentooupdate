#!/usr/bin/env bash

#----------------------------------------------------------------------------
# Gentoo Update
# Copyright (C) 2015 Nathan Shearer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to:
#   The Free Software Foundation Inc.
#   51 Franklin Street
#   Fifth Floor
#   Boston, MA
#   02110-1301
#   USA

NAME="Gentoo Update"
CODENAME="gentooupdate"
COPYRIGHT="Copyright (C) 2015 Nathan Shearer"
LICENSE="GNU General Public License 2.0"
VERSION="1.0.0.0"

# \brief Aborts the update if another instance of emerge is running
function gentooupdate_abort_if_emerging
{
	if $AUTO_ABORT; then
		if ps -C emerge >/dev/null 2>&1; then
			echo "This update was aborted because another instance of emerge is running." >>"$TMP"/emerging.email
			gentooupdate_email $EMAIL_ERROR "$HOSTNAME: update aborted on $NOW" "$TMP"/emerging.email
			gentooupdate_exit 1 "Update aborted because another instance of emerge is running"
		fi
	fi
}

# \brief Aborts the update if there is any news
function gentooupdate_abort_if_news
{
	if $AUTO_ABORT; then
		NEWS=`eselect news count`
		if [ $NEWS -ne 0 ]; then
			echo "This update was aborted because there is unread news:" >>"$TMP"/news.email
			echo >>"$TMP"/news.email
			eselect news list >>"$TMP"/news.email
			gentooupdate_email $EMAIL_ERROR "$HOSTNAME: update aborted on $NOW" "$TMP"/news.email
			gentooupdate_exit 1 "Update aborted because there is unread news"
		fi
	fi
}

# \brief Ensures dependencies are present
# \param $@ The dependencies to check for
function gentooupdate_check_dependencies
{
	for TOOL in "$@"; do
		if ! type "$TOOL" >/dev/null 2>/dev/null; then
			echo "$CODENAME: \"$TOOL\" is required for this application to work correctly." >&2
			exit
		fi
	done
}

# \brief Cleans the system by removing packages that are not associated with explicitly merged packages
function gentooupdate_depclean
{
	echo "gentooupdate_depclean" "$@" >> "$LOG"
	local NOW=`date --rfc-3339=seconds`
	
	rm -f "$TMP"/depclean.log
	emerge $DEPCLEAN_ARGS >>"$TMP"/depclean.log 2>>"$TMP"/depclean.log
	if [ $? -ne 0 ]; then
		echo "The \"emerge --depclean\" operation failed. Log is included below:" >>"$TMP"/depclean.email
		echo >>"$TMP"/depclean.email
		cat "$TMP"/depclean.log >>"$TMP"/depclean.email
		gentooupdate_email $EMAIL_ERROR "$HOSTNAME: update failed on $NOW" "$TMP"/depclean.email
		gentooupdate_exit 4 "The \"emerge --depclean\" operation failed"
	fi
}

# \brief Sends an email
# \param $1 The e-mail address
# \param $2 The subject
# \param $3 The file containing the message
function gentooupdate_email
{
	echo "gentooupdate_email" "$@" >> "$LOG"
	if [ $# -eq 3 -a "$1" != "" ]; then
		cat "$3" | mail -s "$2" "$1"
	fi
}

# \brief Cleans up the environment and exits
# \param $1 The exit code
# \param $2 The exit message
#
# If DEBUG=true then temporary files are not deleted.
function gentooupdate_exit
{
	#echo "gentooupdate_exit" "$@" >>"$LOG"
	if $EXITING; then return; fi
	EXITING=true
	local EXIT="$1"
	local MESSAGE="$2"
	if [ "$EXIT" = "" ]; then
		EXIT=0
	fi
	if [ "$MESSAGE" = "" ]; then
		MESSAGE="An unrecoverable error has occurred"
	fi
	if ! $DEBUG; then
		rm -rf "$TMP"
	else
		echo "Debug mode is enabled. Temporary files in \"$TMP\" will *not* be deleted."
	fi
	case $EXIT in
		0) exit;;
		*) echo "$CODENAME: $MESSAGE" >&2; exit $EXIT;;
	esac
}

# \brief Displays the help and exits the program
function gentooupdate_help
{
	echo "$NAME $VERSION"
	echo "$COPYRIGHT"
	echo "Licensed under $LICENSE"
	echo "This script automatically updates Gentoo Linux."
	echo "Usage:"
	echo "  $CODENAME [options]"
	echo "Options:"
	echo "  -a true"
	echo "    Abort if there is unread news or if emerge is already running."
	echo "  -d \"--depclean\""
	echo "    The arguments passed to emerge during the depclean phase."
	echo "  -e \"\""
	echo "    The arguments passed to revdep-rebuild during the revdep phase."
	echo "  -h"
	echo "    Display this help message and exit."
	echo "  -n N"
	echo "    Sets the niceness to N (default 0)."
	echo "  -r \"@preserved-rebuild\""
	echo "    The arguments passed to emerge during the represerve phase."
	echo "  -s \"--sync\""
	echo "    The arguments passed to emerge during the sync phase."
	echo "  -u \"-uDN --with-bdeps=y world\""
	echo "    The arguments passed to emerge during the update phase."
	echo "Examples:"
	echo "  $CODENAME -a false"
	echo "  $CODENAME -n 20 -u \"-uDN --with-bdeps=y --keep-going world\""
	exit
}

# \brief Logs messages to syslog with logger
# \param $1 Only log this message if $VERBOSE is greater than or equal to $1
# \param $2 The message that will be logged
function gentooupdate_log
{
	if [ $VERBOSE -ge $1 ]; then
		logger "$CODENAME: $2"
	fi
}

# \brief The main function of this script
function gentooupdate_main
{
	echo "gentooupdate_email" "$@" >> "$LOG"
	local NOW=`date --rfc-3339=seconds`
	
	gentooupdate_abort_if_emerging
	gentooupdate_sync
	gentooupdate_update
	gentooupdate_represerve
	gentooupdate_depclean
	gentooupdate_revdep
	
	echo "The update completed successfully." > "$TMP"/success.email
	echo >> "$TMP"/success.email
	cat "$TMP"/update.log >> "$TMP"/success.email
	
	gentooupdate_email $EMAIL_LOG "$HOSTNAME: update completed successfully on $NOW" "$TMP"/success.email
}

# \brief Rebuilds packages with preserved libraries
function gentooupdate_represerve
{
	echo "gentooupdate_represerve" "$@" >> "$LOG"
	local NOW=`date --rfc-3339=seconds`
	
	gentooupdate_abort_if_news

	rm -f "$TMP"represerve
	emerge $REPRESERVE_ARGS >>"$TMP"/represerve.log 2>>"$TMP"/represerve.log
	if [ $? -ne 0 ]; then
		echo "The \"emerge @preserved-rebuild\" operation failed. Log is included below:" >>"$TMP"/represerve.email
		echo >>"$TMP"/represerve.email
		cat "$TMP"/represerve.log >>"$TMP"/represerve.email
		gentooupdate_email $EMAIL_ERROR "$HOSTNAME: update failed on $NOW" "$TMP"/represerve.email
		gentooupdate_exit 3 "The \"emerge @preserved-rebuild\" operation failed"
	fi
}

# \brief Re-emerge broken binaries and shared libraries
function gentooupdate_revdep
{
	echo "gentooupdate_revdep" "$@" >> "$LOG"
	local NOW=`date --rfc-3339=seconds`
	
	rm -f "$TMP"/revdep-rebuild.log
	revdep-rebuild $REVDEP_ARGS >>"$TMP"/revdep-rebuild.log 2>>"$TMP"/revdep-rebuild.log
	if [ $? -ne 0 ]; then
		echo "The \"revdep-rebuild\" operation failed. Log is included below:" >>"$TMP"/revdep-rebuild.email
		echo >>"$TMP"/revdep-rebuild.email
		cat "$TMP"/revdep-rebuild.log >>"$TMP"/revdep-rebuild.email
		gentooupdate_email $EMAIL_ERROR "$HOSTNAME: update failed on $NOW" "$TMP"/revdep-rebuild.email
		gentooupdate_exit 5 "The \"revdep-rebuild\" operation failed"
	fi
}

# \brief Synchronizes portage repositories
function gentooupdate_sync
{
	echo "gentooupdate_sync" "$@" >> "$LOG"
	local NOW=`date --rfc-3339=seconds`
	
	gentooupdate_abort_if_news

	rm -f "$TMP"/sync.log
	emerge $SYNC_ARGS >>"$TMP"/sync.log 2>>"$TMP"/sync.log
	if [ $? -ne 0 ]; then
		echo "The \"emerge --sync\" operation failed. Log is included below:" >>"$TMP"/sync.email
		echo >>"$TMP"/sync.email
		cat "$TMP"/sync.log >>"$TMP"/sync.email
		gentooupdate_email $EMAIL_ERROR "$HOSTNAME: update failed on $NOW" "$TMP"/sync.email
		gentooupdate_exit 2 "The \"emerge --sync\" operation failed"
	fi
}

# \brief Update packages
function gentooupdate_update
{
	echo "gentooupdate_update" "$@" >> "$LOG"
	local NOW=`date --rfc-3339=seconds`
	
	gentooupdate_abort_if_news

	rm -f "$TMP"/update.log
	emerge $UPDATE_ARGS >>"$TMP"/update.log 2>>"$TMP"/update.log
	if [ $? -ne 0 ]; then
		echo "The \"emerge -uDN --with-bdeps=y world\" operation failed. Log is included below:" >>"$TMP"/update.email
		echo >>"$TMP"/update.email
		cat "$TMP"/update.log >>"$TMP"/update.email
		gentooupdate_email $EMAIL_ERROR "$HOSTNAME: update failed on $NOW" "$TMP"/update.email
		gentooupdate_exit 3 "The \"emerge -uDN --with-bdeps=y world\" operation failed"
	fi
}

#------------------------------------------------------------------------------
# default configuration
#
EMAIL_ERROR=""
EMAIL_LOG=""
AUTO_ABORT=true
SYNC_ARGS="--sync"
UPDATE_ARGS="-uDN --with-bdeps=y --backtrack=64 --quiet-build world"
REPRESERVE_ARGS="@preserved-rebuild"
DEPCLEAN_ARGS="--depclean"
REVDEP_ARGS=""
DEBUG=false
NICE=0
TMP="/tmp"

#------------------------------------------------------------------------------
# config files
#
if [ -r /etc/$CODENAME.conf ]; then
	. /etc/$CODENAME.conf
fi
if [ -r ~/.$CODENAME.conf ]; then
	. ~/.$CODENAME.conf
fi

#------------------------------------------------------------------------------
# command line arguments
#
while getopts "a:d:hn:r:s:u:" OPTION; do
	case "$OPTION" in
		"a") AUTO_ABORT="$OPTARG";;
		"d") DEPCLEAN_ARGS="$OPTARG";;
		"e") REVDEP_ARGS="$OPTARG";;
		"h") gentooupdate_help;;
		"n") NICE="$OPTARG";;
		"r") REPRESERVE_ARGS="$OPTARG";;
		"s") SYNC_ARGS="$OPTARG";;
		"u") UPDATE_ARGS="$OPTARG";;
		*) gentooupdate_help;;
	esac
done
shift $(( $OPTIND - 1 ))

#------------------------------------------------------------------------------
# prepare environment
#
EXITING=false
trap gentooupdate_exit EXIT SIGHUP SIGINT SIGQUIT SIGABRT SIGKILL SIGTERM
TMP="$TMP/$CODENAME.$$"
mkdir -p "$TMP"
LOG="$TMP/log"
touch "$LOG"
renice $NICE $$ >>"$LOG" 2>>"$LOG"

#------------------------------------------------------------------------------
# begin execution
#
gentooupdate_main
